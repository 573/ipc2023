name: Build

on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - bamboovir-template
    paths:
      - "src/**"
      - "resources/**"
      - "**.nix"
      - ".github/workflows/*.yml"
    inputs:
      branch:
        description: Branch name to build on
        default: ""
        required: false
        type: string
    secrets:
      CACHIX_ACTIVATE_TOKEN:
        required: true

jobs:
  dependencies:
    name: Build dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Check out source files
        uses: actions/checkout@v4


  build:
    strategy:
      fail-fast: false
      matrix:
        yamlbasename:
          - build.yml
        os:
          - ubuntu-latest
        system:
          - aarch64
          - x86_64

    name: Build PDF files
    runs-on: ubuntu-latest
    needs: dependencies

    steps:
      - name: Set git to use LF
        run: |
            git config --global core.autocrlf false
            git config --global core.eol lf

      - name: Check out source files
        uses: actions/checkout@v4

      - name: Install qemu-user-static (aarch64)
        if: matrix.system == 'aarch64'
        env:
          _system: ${{ matrix.system }}-linux
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          sudo apt-get update --allow-releaseinfo-change
          sudo apt-get update
          sudo apt-get install -y qemu-user-static

      - name: Quick install
        env:
          _system: ${{ matrix.system }}-linux
        uses: cachix/install-nix-action@v29
        with:
          install_url: 'https://releases.nixos.org/nix/nix-2.24.8/install'
          extra_nix_config: |
            substituters = https://cache.nixos.org/ https://nix-community.cachix.org
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs=
            keep-going = true
            show-trace = true
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
            keep-outputs = true
            ${{ matrix.system == 'aarch64' && 'system = aarch64-linux # enables binfmt on that machine, see https://nixos.wiki/wiki/NixOS_on_ARM#Compiling_through_binfmt_QEMU' || '' }}

      - name: Restore and cache Nix store
        env:
          _system: ${{ matrix.system }}-linux
        uses: nix-community/cache-nix-action@v5
        with:
          # save a new cache every time ci file changes
          primary-key: cache-${{ matrix.os }}-${{ hashFiles('.github/workflows/build.yaml') }}
          restore-prefixes-first-match: cache-${{ matrix.os }}-
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: cache-${{ matrix.os }}-
          # created more than 0 seconds ago relative to the start of the `Post Restore` phase
          purge-created: 0
          # except the version with the `primary-key`, if it exists
          purge-primary-key: never
          # and collect garbage in the Nix store until it reaches this size in bytes
          gc-max-store-size: 8000000000

      - name: Setup cachix
        env:
          _system: ${{ matrix.system }}-linux
        uses: cachix/cachix-action@v15
        with:
          name: 573-bc
          authToken: ${{ secrets.CACHIX_ACTIVATE_TOKEN }}

      - name: Build document
        env:
          _system: ${{ matrix.system }}-linux
        run: |
            cachix use 573-bc
            cachix use nix-on-droid
            ${{ (matrix.system == 'aarch64') && 'cachix watch-exec 573-bc -- \' || '' }}
            nix build .#resume --quiet
            cp result/* .

      - name: Upload build assets
        uses: actions/upload-artifact@v3
        with:
          name: resume--PR-${{ github.event.pull_request.number }}--${{ github.sha }}
          path: resume.pdf

  release:
    if: github.event_name != 'pull_request'
    name: "Create tag/pre-release"
    runs-on: ubuntu-latest
    needs: [dependencies,build]
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create pre-release (v${{ github.run_number }}-${{ github.sha }})
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}-${{ github.sha }}
          release_name: Version ${{ github.run_number }} (${{ github.sha }})
          draft: false
          prerelease: true

  assets:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: [dependencies,release]

    steps:
      - name: Download build assets (${{ matrix.assets.input }})
        uses: actions/download-artifact@v3
        with:
          name: resume--PR-${{ github.event.pull_request.number }}--${{ github.sha }}
          path: resume--PR-${{ github.event.pull_request.number }}--${{ github.sha }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: resume--PR-${{ github.event.pull_request.number }}--${{ github.sha }}/resume.pdf
          asset_name: ${{ github.run_number }}--resume--${{ github.sha  }}.pdf
          asset_content_type: application/pdf
